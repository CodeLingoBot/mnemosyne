syntax = "proto3";

package mnemosyne;

import "protot.proto";

service RPC {
    rpc Context(Empty) returns (Session) {};
    rpc Get(GetRequest) returns (GetResponse) {};
    rpc List(ListRequest) returns (ListResponse) {};
    rpc Exists(ExistsRequest) returns (ExistsResponse) {};
    rpc Start(StartRequest) returns (StartResponse) {};
    rpc Abandon(AbandonRequest) returns (AbandonResponse) {};
    rpc SetValue(SetValueRequest) returns (SetValueResponse) {};
//    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {};
//    rpc Clear(ClearRequest) returns (ClearResponse) {};
    rpc Delete(DeleteRequest) returns (DeleteResponse) {};
}

message Empty {}
// Token represents identifier of single session. It consist of partition key and a hash.
message Token {
    bytes key = 1;
    bytes hash = 2;
}

message Session {
    Token token = 1;
    string subject_id = 2;
    map<string, string> bag = 3;
    protot.Timestamp expire_at = 4;
}

message GetRequest {
    Token token = 1;
}
message GetResponse {
    Session session = 1;
}

message ListRequest {
    int64 offset = 1;
    int64 limit = 2;
    protot.Timestamp expire_at_from = 3;
    protot.Timestamp expire_at_to = 4;
}
message ListResponse {
    repeated Session sessions = 1;
}

message ExistsRequest {
    Token token = 1;
}
message ExistsResponse {
    bool exists = 1;
}

message StartRequest {
    string subject_id = 1;
    map<string, string> bag = 2;
}
message StartResponse {
    Session session = 1;
}

message AbandonRequest {
    Token token = 1;
}
message AbandonResponse {
    bool abandoned = 1;
}

message SetValueRequest {
    Token token = 1;
    string key = 2;
    string value = 3;
}
message SetValueResponse {
    map<string, string> bag = 1;
}

message DeleteValueRequest {
    Token token = 1;
    string key = 2;
}
message DeleteValueResponse {
    Session session = 1;
}

message ClearRequest {
    Token token = 1;
}
message ClearResponse {
}

message DeleteRequest {
    Token token = 1;
    protot.Timestamp expire_at_from = 2;
    protot.Timestamp expire_at_to = 3;
}
message DeleteResponse {
    int64 count = 1;
}
