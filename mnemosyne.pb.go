// Code generated by protoc-gen-go.
// source: mnemosyne.proto
// DO NOT EDIT!

/*
Package mnemosyne is a generated protocol buffer package.

It is generated from these files:
	mnemosyne.proto

It has these top-level messages:
	AccessToken
	Session
	GetRequest
	GetResponse
	ListRequest
	ListResponse
	ExistsRequest
	ExistsResponse
	StartRequest
	StartResponse
	AbandonRequest
	AbandonResponse
	SetValueRequest
	SetValueResponse
	DeleteValueRequest
	DeleteValueResponse
	ClearRequest
	ClearResponse
	DeleteRequest
	DeleteResponse
*/
package mnemosyne

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// AccessToken represents identifier of single session. It consist of partition key and a hash.
type AccessToken struct {
	Key  []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *AccessToken) Reset()                    { *m = AccessToken{} }
func (m *AccessToken) String() string            { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()               {}
func (*AccessToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Session struct {
	AccessToken *AccessToken               `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	SubjectId   string                     `protobuf:"bytes,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	Bag         map[string]string          `protobuf:"bytes,3,rep,name=bag" json:"bag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExpireAt    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expire_at,json=expireAt" json:"expire_at,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Session) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *Session) GetBag() map[string]string {
	if m != nil {
		return m.Bag
	}
	return nil
}

func (m *Session) GetExpireAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireAt
	}
	return nil
}

type GetRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type GetResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type ListRequest struct {
	Offset       int64                      `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit        int64                      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	ExpireAtFrom *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expire_at_from,json=expireAtFrom" json:"expire_at_from,omitempty"`
	ExpireAtTo   *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expire_at_to,json=expireAtTo" json:"expire_at_to,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetExpireAtFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireAtFrom
	}
	return nil
}

func (m *ListRequest) GetExpireAtTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireAtTo
	}
	return nil
}

type ListResponse struct {
	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListResponse) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type ExistsRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *ExistsRequest) Reset()                    { *m = ExistsRequest{} }
func (m *ExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExistsRequest) ProtoMessage()               {}
func (*ExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExistsRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type ExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *ExistsResponse) Reset()                    { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()               {}
func (*ExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StartRequest struct {
	SubjectId string            `protobuf:"bytes,1,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	Bag       map[string]string `protobuf:"bytes,2,rep,name=bag" json:"bag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StartRequest) GetBag() map[string]string {
	if m != nil {
		return m.Bag
	}
	return nil
}

type StartResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StartResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type AbandonRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *AbandonRequest) Reset()                    { *m = AbandonRequest{} }
func (m *AbandonRequest) String() string            { return proto.CompactTextString(m) }
func (*AbandonRequest) ProtoMessage()               {}
func (*AbandonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AbandonRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type AbandonResponse struct {
	Abandoned bool `protobuf:"varint,1,opt,name=abandoned" json:"abandoned,omitempty"`
}

func (m *AbandonResponse) Reset()                    { *m = AbandonResponse{} }
func (m *AbandonResponse) String() string            { return proto.CompactTextString(m) }
func (*AbandonResponse) ProtoMessage()               {}
func (*AbandonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SetValueRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	Key         string       `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value       string       `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *SetValueRequest) Reset()                    { *m = SetValueRequest{} }
func (m *SetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*SetValueRequest) ProtoMessage()               {}
func (*SetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetValueRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type SetValueResponse struct {
	Bag map[string]string `protobuf:"bytes,1,rep,name=bag" json:"bag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SetValueResponse) Reset()                    { *m = SetValueResponse{} }
func (m *SetValueResponse) String() string            { return proto.CompactTextString(m) }
func (*SetValueResponse) ProtoMessage()               {}
func (*SetValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SetValueResponse) GetBag() map[string]string {
	if m != nil {
		return m.Bag
	}
	return nil
}

type DeleteValueRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	Key         string       `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteValueRequest) Reset()                    { *m = DeleteValueRequest{} }
func (m *DeleteValueRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteValueRequest) ProtoMessage()               {}
func (*DeleteValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteValueRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type DeleteValueResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *DeleteValueResponse) Reset()                    { *m = DeleteValueResponse{} }
func (m *DeleteValueResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteValueResponse) ProtoMessage()               {}
func (*DeleteValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteValueResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type ClearRequest struct {
	AccessToken *AccessToken `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *ClearRequest) Reset()                    { *m = ClearRequest{} }
func (m *ClearRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearRequest) ProtoMessage()               {}
func (*ClearRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClearRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

type ClearResponse struct {
}

func (m *ClearResponse) Reset()                    { *m = ClearResponse{} }
func (m *ClearResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearResponse) ProtoMessage()               {}
func (*ClearResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type DeleteRequest struct {
	AccessToken  *AccessToken               `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	ExpireAtFrom *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expire_at_from,json=expireAtFrom" json:"expire_at_from,omitempty"`
	ExpireAtTo   *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expire_at_to,json=expireAtTo" json:"expire_at_to,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteRequest) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *DeleteRequest) GetExpireAtFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireAtFrom
	}
	return nil
}

func (m *DeleteRequest) GetExpireAtTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireAtTo
	}
	return nil
}

type DeleteResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func init() {
	proto.RegisterType((*AccessToken)(nil), "mnemosyne.AccessToken")
	proto.RegisterType((*Session)(nil), "mnemosyne.Session")
	proto.RegisterType((*GetRequest)(nil), "mnemosyne.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "mnemosyne.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "mnemosyne.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "mnemosyne.ListResponse")
	proto.RegisterType((*ExistsRequest)(nil), "mnemosyne.ExistsRequest")
	proto.RegisterType((*ExistsResponse)(nil), "mnemosyne.ExistsResponse")
	proto.RegisterType((*StartRequest)(nil), "mnemosyne.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "mnemosyne.StartResponse")
	proto.RegisterType((*AbandonRequest)(nil), "mnemosyne.AbandonRequest")
	proto.RegisterType((*AbandonResponse)(nil), "mnemosyne.AbandonResponse")
	proto.RegisterType((*SetValueRequest)(nil), "mnemosyne.SetValueRequest")
	proto.RegisterType((*SetValueResponse)(nil), "mnemosyne.SetValueResponse")
	proto.RegisterType((*DeleteValueRequest)(nil), "mnemosyne.DeleteValueRequest")
	proto.RegisterType((*DeleteValueResponse)(nil), "mnemosyne.DeleteValueResponse")
	proto.RegisterType((*ClearRequest)(nil), "mnemosyne.ClearRequest")
	proto.RegisterType((*ClearResponse)(nil), "mnemosyne.ClearResponse")
	proto.RegisterType((*DeleteRequest)(nil), "mnemosyne.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "mnemosyne.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for RPC service

type RPCClient interface {
	Context(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Session, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Abandon(ctx context.Context, in *AbandonRequest, opts ...grpc.CallOption) (*AbandonResponse, error)
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error)
	//    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {};
	//    rpc Clear(ClearRequest) returns (ClearResponse) {};
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Context(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Context", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Abandon(ctx context.Context, in *AbandonRequest, opts ...grpc.CallOption) (*AbandonResponse, error) {
	out := new(AbandonResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Abandon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error) {
	out := new(SetValueResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/SetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/mnemosyne.RPC/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	Context(context.Context, *google_protobuf1.Empty) (*Session, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Abandon(context.Context, *AbandonRequest) (*AbandonResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	//    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {};
	//    rpc Clear(ClearRequest) returns (ClearResponse) {};
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Context_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Context(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Context",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Context(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Abandon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Abandon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Abandon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Abandon(ctx, req.(*AbandonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mnemosyne.RPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mnemosyne.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Context",
			Handler:    _RPC_Context_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RPC_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RPC_List_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _RPC_Exists_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _RPC_Start_Handler,
		},
		{
			MethodName: "Abandon",
			Handler:    _RPC_Abandon_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _RPC_SetValue_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RPC_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0xc6, 0x31, 0x90, 0x64, 0xf2, 0x87, 0xf6, 0x9c, 0x03, 0x39, 0xe6, 0x1c, 0x09, 0x59, 0x55,
	0xc5, 0x45, 0x9b, 0x48, 0x20, 0xd1, 0x1f, 0xe8, 0x0f, 0xa4, 0x29, 0xa2, 0xed, 0x45, 0x65, 0x50,
	0x6f, 0xa3, 0x4d, 0xb2, 0x31, 0x2e, 0xb1, 0x37, 0xcd, 0x6e, 0x2a, 0x72, 0xdb, 0x3e, 0x45, 0x9f,
	0xa5, 0x6f, 0xd0, 0x67, 0xea, 0x45, 0xd7, 0xbb, 0x6b, 0xc7, 0x26, 0xa1, 0xb4, 0x24, 0xbd, 0xb1,
	0x76, 0x67, 0x67, 0xbe, 0x99, 0xef, 0xdb, 0xf1, 0x2c, 0x54, 0xfc, 0x80, 0xf8, 0x94, 0x8d, 0x03,
	0x52, 0x1b, 0x0c, 0x29, 0xa7, 0x28, 0x1f, 0x1b, 0xac, 0x7d, 0xd7, 0xe3, 0xe7, 0xa3, 0x76, 0xad,
	0x43, 0xfd, 0xba, 0x4b, 0xfb, 0x38, 0x70, 0xeb, 0xd2, 0xa7, 0x3d, 0xea, 0xd5, 0x07, 0x7c, 0x3c,
	0x20, 0xac, 0xce, 0x3d, 0x9f, 0x30, 0x8e, 0xfd, 0xc1, 0x64, 0xa5, 0x70, 0xac, 0xdd, 0x9b, 0x83,
	0x89, 0x2f, 0x16, 0xea, 0xab, 0x82, 0xec, 0x5d, 0x28, 0x1c, 0x76, 0x3a, 0x84, 0xb1, 0x33, 0x7a,
	0x41, 0x02, 0xb4, 0x06, 0xe6, 0x05, 0x19, 0x57, 0x8d, 0x2d, 0x63, 0xbb, 0xe8, 0x84, 0x4b, 0x84,
	0x60, 0xf9, 0x1c, 0xb3, 0xf3, 0x6a, 0x46, 0x9a, 0xe4, 0xda, 0xfe, 0x9c, 0x81, 0xec, 0xa9, 0x88,
	0xf1, 0x68, 0x80, 0x1e, 0x41, 0x11, 0x4b, 0x80, 0x16, 0x0f, 0x11, 0x64, 0x68, 0x61, 0x67, 0xbd,
	0x36, 0x61, 0x99, 0xc0, 0x77, 0x0a, 0x38, 0x91, 0xec, 0x7f, 0x00, 0x36, 0x6a, 0xbf, 0x27, 0x1d,
	0xde, 0xf2, 0xba, 0x32, 0x41, 0xde, 0xc9, 0x6b, 0xcb, 0x49, 0x17, 0xdd, 0x07, 0xb3, 0x8d, 0xdd,
	0xaa, 0xb9, 0x65, 0x0a, 0xc0, 0xcd, 0x04, 0xa0, 0x4e, 0x5d, 0x3b, 0xc2, 0x6e, 0x33, 0xe0, 0xc3,
	0xb1, 0x13, 0xfa, 0xa1, 0x07, 0x90, 0x27, 0x97, 0x03, 0x6f, 0x48, 0x5a, 0x98, 0x57, 0x97, 0x65,
	0x15, 0x56, 0xcd, 0xa5, 0xd4, 0xed, 0x6b, 0xa1, 0x85, 0x0e, 0xb5, 0xb3, 0x48, 0x33, 0x27, 0xa7,
	0x9c, 0x0f, 0xb9, 0xb5, 0x07, 0xb9, 0x08, 0x29, 0xc9, 0x3f, 0xaf, 0xf8, 0xff, 0x0d, 0x2b, 0x1f,
	0x71, 0x7f, 0x44, 0x74, 0x7d, 0x6a, 0xf3, 0x38, 0xf3, 0xd0, 0xb0, 0x8f, 0x01, 0x8e, 0x09, 0x77,
	0xc8, 0x87, 0x91, 0x80, 0x9c, 0x43, 0x07, 0x7b, 0x1f, 0x0a, 0x12, 0x88, 0x0d, 0x68, 0xc0, 0x08,
	0xba, 0x07, 0x59, 0xa6, 0x18, 0x6a, 0x10, 0x34, 0xcd, 0xdd, 0x89, 0x5c, 0xec, 0xaf, 0x06, 0x14,
	0xde, 0x78, 0x2c, 0xae, 0x63, 0x1d, 0x56, 0x69, 0xaf, 0xc7, 0x08, 0x97, 0xc1, 0xa6, 0xa3, 0x77,
	0x21, 0x8f, 0xbe, 0xe7, 0x7b, 0x5c, 0xf2, 0x30, 0x1d, 0xb5, 0x41, 0xcf, 0xa1, 0x1c, 0x8b, 0xd6,
	0xea, 0x0d, 0xa9, 0x2f, 0xe4, 0xbe, 0x49, 0xb9, 0x62, 0xa4, 0xdc, 0x4b, 0xe1, 0x8f, 0x0e, 0xa0,
	0x38, 0x41, 0xe0, 0xf4, 0x17, 0x94, 0x87, 0x28, 0xfe, 0x8c, 0xda, 0x4f, 0xa1, 0xa8, 0x8a, 0xd7,
	0xdc, 0x6b, 0x90, 0xd3, 0xc4, 0x98, 0xa8, 0xdf, 0xbc, 0x86, 0x7c, 0xec, 0x63, 0xbf, 0x82, 0x52,
	0xf3, 0x52, 0x00, 0xb0, 0x05, 0x5c, 0xc3, 0x36, 0x94, 0x23, 0x2c, 0x5d, 0x8d, 0xd0, 0x92, 0x48,
	0x8b, 0x84, 0xc9, 0x39, 0x7a, 0x67, 0x7f, 0x31, 0xa0, 0x78, 0xca, 0xf1, 0x30, 0x16, 0x3d, 0xdd,
	0xc9, 0xc6, 0xd5, 0x4e, 0xde, 0x51, 0x9d, 0x9c, 0x91, 0x84, 0xb6, 0x92, 0x84, 0x12, 0x20, 0xe9,
	0x76, 0xbe, 0x75, 0x57, 0x3e, 0x81, 0x92, 0x46, 0xbd, 0x55, 0x3b, 0xbd, 0x86, 0xf2, 0x61, 0x1b,
	0x07, 0x5d, 0x61, 0x9b, 0x5f, 0xd1, 0x3a, 0x54, 0x62, 0x30, 0x5d, 0xcd, 0x7f, 0x90, 0xc7, 0xca,
	0x44, 0xba, 0x5a, 0xd5, 0x89, 0xc1, 0xe6, 0x50, 0x39, 0x25, 0xfc, 0x5d, 0x48, 0x66, 0xfe, 0xf4,
	0x91, 0x6c, 0x99, 0x19, 0xb2, 0x99, 0x09, 0xd9, 0xec, 0x4f, 0x06, 0xac, 0x4d, 0xd2, 0xea, 0x42,
	0xf7, 0xd4, 0x9d, 0xa9, 0x26, 0xbc, 0x93, 0x92, 0x2c, 0xed, 0xb9, 0xa0, 0x7b, 0xc3, 0x80, 0x5e,
	0x90, 0x3e, 0xe1, 0xe4, 0x8f, 0xb1, 0xb7, 0x1b, 0xf0, 0x57, 0x2a, 0xc5, 0xad, 0x1a, 0xe4, 0x04,
	0x8a, 0x8d, 0x3e, 0xc1, 0xc3, 0x05, 0xb4, 0x47, 0x05, 0x4a, 0x1a, 0x4a, 0x55, 0x62, 0x7f, 0x33,
	0xa0, 0xa4, 0x2a, 0x5c, 0x00, 0xff, 0xe9, 0xd1, 0x96, 0x99, 0x73, 0xb4, 0x99, 0xbf, 0x35, 0xda,
	0xee, 0x42, 0x39, 0xe2, 0xa2, 0x85, 0x16, 0x97, 0xdf, 0xa1, 0xa3, 0x20, 0x9a, 0xcc, 0x6a, 0xb3,
	0xf3, 0xdd, 0x04, 0xd3, 0x79, 0xdb, 0x10, 0xef, 0x57, 0xb6, 0x41, 0x03, 0x4e, 0x2e, 0xc5, 0x0c,
	0x9f, 0x4a, 0xd1, 0x0c, 0x9f, 0x6c, 0x6b, 0xc6, 0xc5, 0xd8, 0x4b, 0x61, 0xa7, 0x8a, 0xe7, 0x03,
	0xfd, 0x93, 0x38, 0x9c, 0xbc, 0x4b, 0xd6, 0xfa, 0x55, 0xb3, 0xd6, 0x7a, 0x49, 0x68, 0xbb, 0x1c,
	0xce, 0x5e, 0x94, 0xf4, 0x48, 0xbc, 0x24, 0xd6, 0xc6, 0x94, 0x3d, 0x0e, 0x7d, 0x06, 0xab, 0x6a,
	0x54, 0xa2, 0x6a, 0xc2, 0x29, 0x35, 0x89, 0xad, 0x7f, 0x67, 0x9c, 0xc4, 0x00, 0x07, 0xb0, 0x22,
	0xa7, 0x14, 0xda, 0xb8, 0x66, 0x1a, 0x5a, 0xd5, 0xe9, 0x83, 0x38, 0xfa, 0x08, 0xb2, 0x7a, 0xae,
	0xa0, 0x64, 0x96, 0xf4, 0xe0, 0xb2, 0xac, 0x59, 0x47, 0x31, 0x46, 0x13, 0x72, 0xd1, 0x9f, 0x8c,
	0xac, 0x99, 0xbf, 0xb7, 0x42, 0xd9, 0xfc, 0xc9, 0xaf, 0xaf, 0x94, 0x50, 0xb7, 0x9c, 0x52, 0x22,
	0xd5, 0xc4, 0x29, 0x25, 0xd2, 0x2d, 0x61, 0x2f, 0xb5, 0x57, 0xe5, 0x1d, 0xef, 0xfe, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x10, 0xd9, 0xec, 0x99, 0x17, 0x0a, 0x00, 0x00,
}
